// Generated by CoffeeScript 1.10.0
var BB, t,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

t = function() {
  return $.i18n.apply($.i18n, arguments);
};

Backbone.emulateHTTP = true;

Backbone.emulateJSON = true;

BB = function() {};

BB.Events = _.extend({}, Backbone.Events);

BB.Events.KEY_ENTER = 13;

BB.Events.KEY_S = 83;

BB.Events.KEY_MAC_CMD_S = 19;

BB.Events.KEY_CTRL_S = function(e) {
  return !(!(e.which === BB.Events.KEY_S && e.ctrlKey) && !(e.which === BB.Events.KEY_MAC_CMD_S));
};

BB.Cache = {};

BB.Cache.BACKUP = 'backup';

BB.Cache.SITES = 'sites';

BB.Cache.DOMAINS = 'domains';

BB.Cache.SUBDOMAINS = 'subdomains';

BB.Cache.MYSQL = 'mysql';

BB.Cache.SITES_DOMAINS = 'sites_domain';

BB.Cache.CMS = 'cms';

BB.Cache.FTP = 'ftp';

BB.Cache.CMS_INSTALLED = 'cms_installed';

BB.Cache.MULTIACCOUNTS = 'multiaccounts';

BB.Widget = (function(superClass) {
  extend(Widget, superClass);

  function Widget() {
    this._close = bind(this._close, this);
    return Widget.__super__.constructor.apply(this, arguments);
  }

  Widget.prototype.debug = false;

  Widget.prototype.render = function() {
    this.delegateEvents();
    return this;
  };

  Widget.prototype.initialize = function(options) {
    var error;
    options || (options = {});
    if (options.container != null) {
      try {
        this.setElement(options.container);
      } catch (error) {
        throw "No container option in application View";
      }
    }
    if (options.app != null) {
      this.app = options.app;
    }
    if (options.bui != null) {
      this.bui = options.bui;
    }
    if (options.storage != null) {
      this.storage = options.storage;
    }
    if (options.providers != null) {
      this.providers = options.providers;
    }
    if (options.app != null) {
      this.app = options.app;
    }
    this.start(options);
    return BB.Events.on('app.before.start', this._close, this);
  };

  Widget.prototype.start = function() {};

  Widget.prototype._close = function() {
    this.undelegateEvents();
    this.remove();
    this.unbind();
    this.stopListening();
    this.off();
    return BB.Events.off(null, null, this);
  };

  return Widget;

})(Backbone.View);

BB.View = (function(superClass) {
  extend(View, superClass);

  function View() {
    return View.__super__.constructor.apply(this, arguments);
  }

  View.prototype.use_cache = false;

  View.prototype.preload = {};

  View.prototype.providers = {};

  View.prototype.collections = {};

  View.prototype.initialize = function(options) {
    var error, key, need_check_preload, provider_name;
    options || (options = {});
    try {
      this.setElement(options.container);
    } catch (error) {
      throw "No container option in application View";
    }
    if (options.page_name != null) {
      this.page_name = options.page_name;
      this.direct_cache_key = this.page_name + '_direct';
    } else {
      throw "No page name option in application View";
    }
    for (provider_name in this.providers) {
      this.addProvider(provider_name, this.providers[provider_name]);
    }
    BB.Events.on('preload.ready', this.onReady, this);
    this.preparePreload();
    need_check_preload = true;
    if (Object.keys(this.preload).length === 0) {
      need_check_preload = true;
    }
    for (key in this.preload) {
      if (this.preload[key] === false) {
        need_check_preload = false;
      }
    }
    if (this.use_cache) {
      return this.getDirectCache(jQuery.Deferred().done((function(_this) {
        return function() {
          _this.render();
          _this.start(options);
          if (need_check_preload) {
            return _this.checkPreload();
          }
        };
      })(this)));
    } else {
      this.render();
      this.start(options);
      if (need_check_preload) {
        return this.checkPreload();
      }
    }
  };

  View.prototype.onReady = function() {
    $(".loading_custom_16", this.$el).hide();
    return $("#global_blocks", this.$el).fadeIn(400);
  };

  View.prototype.preparePreload = function() {
    var name, results;
    results = [];
    for (name in this.preload) {
      results.push((function(_this) {
        return function(name) {
          BB.Events.off(name);
          return BB.Events.on(name, function() {
            _this.preload[name] = true;
            return _this.checkPreload();
          }, _this);
        };
      })(this)(name));
    }
    return results;
  };

  View.prototype.checkPreload = function() {
    var name, ready;
    ready = true;
    for (name in this.preload) {
      if (!this.preload[name]) {
        ready = false;
      }
    }
    if (ready) {
      return BB.Events.trigger('preload.ready');
    }
  };

  View.prototype.getDirectCache = function(def) {
    var data, e, error;
    try {
      data = this.storage.getObject(this._key);
      return def.resolve(data);
    } catch (error) {
      e = error;
      return this.bui.ajax.send("direct_load_data", {}, {
        onSuccess: (function(_this) {
          return function(data) {
            if (data != null) {
              _this.storage.unpack(data);
            }
            return def.resolve(data);
          };
        })(this)
      });
    }
  };

  View.prototype.console = function() {
    if (this.debug) {
      if (console) {
        return console.log.apply(console, arguments);
      }
    }
  };

  View.prototype.addProvider = function(provider_name, provider_class_name, options) {
    var all_options, provider, provider_class;
    if (typeof this.providers[provider_name] === 'object') {
      return;
    }
    if (window[provider_class_name] != null) {
      provider_class = window[provider_class_name];
      options || (options = {});
      all_options = _.extend(options, {
        storage: this.storage,
        bui: this.bui
      });
      provider = new provider_class(all_options);
      this.providers[provider_name] = provider;
      return provider;
    } else {
      throw "No provider found with name " + provider_class_name.toString();
    }
  };

  View.prototype.createWidget = function(widget_name, options) {
    var all_options, widget, widget_class;
    if (window[widget_name] != null) {
      widget_class = window[widget_name];
      options || (options = {});
      all_options = _.extend(options, {
        storage: this.storage,
        bui: this.bui,
        providers: this.providers
      });
      widget = new widget_class(all_options);
      return widget;
    } else {
      throw "No widget found with name " + widget_name.toString();
    }
  };

  return View;

})(BB.Widget);

BB.Model = (function(superClass) {
  extend(Model, superClass);

  function Model() {
    return Model.__super__.constructor.apply(this, arguments);
  }

  Model.prototype.methods = [];

  Model.prototype.sync = function(method, model, options) {
    var ajaxj_method;
    options || (options = {});
    options.data || (options.data = {});
    method = method.toLowerCase();
    ajaxj_method = model.backend + '?ajaxj&method=ajaxj_' + model.methods[method];
    options.url = ajaxj_method;
    options.type = 'POST';
    if (method === 'create') {
      options.url = ajaxj_method;
    } else if (method === 'delete' || method === 'read' || method === 'update') {
      options.data = _.extend(options.data, {
        id: model.id
      });
      options.url = ajaxj_method;
    } else {
      options.url = ajaxj_method;
    }
    return Backbone.sync.apply(this, arguments);
  };

  Model.prototype.parse = function(response) {
    return response.data || {};
  };

  Model.prototype.initialize = function() {};

  return Model;

})(Backbone.Model);

BB.DataProvider = (function() {
  DataProvider.prototype.debug = false;

  function DataProvider(options) {
    if (options.bui != null) {
      this.bui = options.bui;
    }
    if (options.storage != null) {
      this.storage = options.storage;
    }
    this.start(options);
  }

  DataProvider.prototype.start = function() {};

  DataProvider.prototype.console = function() {
    if (this.debug) {
      if (console) {
        return console.log.apply(console, arguments);
      }
    }
  };

  return DataProvider;

})();

BB.Device = {};

BB.Device.isMobile = function() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);
};

BB.formGenerator = function(url, options, submit) {
  var defaults, form, id, item, newForm, submittedForm;
  id = "_hidden_form";
  defaults = {
    data: {},
    method: 'POST',
    target: '_blank'
  };
  options = _.extend(defaults, options || {});
  form = $('#' + id);
  if (form.length > 0) {
    form.remove();
  }
  newForm = ("<form id='" + id + "' style='display: none' action='") + url + "' method='" + options.method + "' target='" + options.target + "'>";
  for (item in options.data) {
    if (options.data.hasOwnProperty(item)) {
      newForm += "<input name='" + item + "' value='" + options.data[item] + "'>";
    }
  }
  newForm += '<button type="submit">send</button></form>';
  submittedForm = $(newForm);
  if (submit) {
    submittedForm.appendTo($('body'));
    $('button', submittedForm).trigger('click');
    return true;
  } else {
    return submittedForm;
  }
};
